openapi: 3.0.0
info:
  description: WASAPhoto app backend REST APIs
  title: WASAPhoto
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: "User"
    description: User operations
  - name: "Photo"
    description: Photo operations
  - name: "login"
    description: Operations for login
components:
  responses:
    Unauthorized:
      description: The client could not authenticate a request.
    BadRequest:
      description: The request was not compliant with the documentation (eg.missing fields, etc).
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
  parameters:
    userId:
      schema:
        description: userId schema
        type: integer
        example: 32
        minimum: 0
        readOnly: true
      name: userId
      in: path
      required: true
      description: The unique user identifier
    photoId:
      schema:
        description: photoId schema
        type: integer
        example: 2
        minimum: 0
        readOnly: true
      name: photoId
      in: path
      required: true
      description: The unique photo identifier
    username:
      name: username
      required: true
      description: The username of the user posted the photo
      in: path
      schema:
        description: username schema
        type: string
        example: Alice
        pattern: "ˆ.*?$"
        minLength: 3
        maxLength: 20
    followedUserId:
      name: followedUserId
      in: path
      required: true
      description: The unique followed User identifier
      schema:
        description: followedUserId schema
        type: integer
        example: 4
        minimum: 0
        readOnly: true
    bannedUserId:
      name: bannedUserId
      in: path
      required: true
      description: The unique banned User identifier
      schema:
        description: bannedUserId schema
        type: integer
        example: 3
        minimum: 0
        readOnly: true
    commentId:
      name: commentId
      in: path
      required: true
      description: The unique comment identifier
      schema:
        description: commentId schema
        type: integer
        example: 1
        minimum: 0
        readOnly: true
  schemas:
    user:
      title: User
      description: This object represents a user
      type: object
      properties:
        id:
          description: The unique user identifier
          type: integer
          example: 1
          minimum: 0
        username:
          description: The username of the user posted the photo
          type: string
          example: Alice
          pattern: "ˆ.*?$"
          minLength: 3
          maxLength: 20
        photosCount:
          description: The total number of uploaded photos by this user
          type: integer
          example: 87
          minimum: 0
        followers:
          description: List of usernames of user's followers.
          type: object
          minItems: 0
        followersCount:
          description: The total number of users that follow the current user
          example: 24
          type: integer
          minimum: 0
        followings:
          description: List of usernames of users that the current user is following.
          type: object
          minItems: 0
        followingsCount:
          description: The total number of users that are followed by current user
          example: 52
          type: integer
          minimum: 0
        photosPath:
          description: List of paths of photos that the user uploaded.
          type: object
    userLogin:
      title: UserLogin
      description: Login schema.
      type: object
      properties:
        id:
          description: The user comment identifier
          type: integer
          example: 3
          minimum: 0
        username:
          description: user
          type: string
          example: Alice
          pattern: "^.*?$"
          minLength: 3
          maxLength: 20
    comment:
      title: Comment
      description: The comments of the photo
      type: object
      properties:
        id:
          description: The unique comment identifier
          type: integer
          example: 2
          minimum: 0
        userId:
          description: The unique user identifier
          type: integer
          example: 3
          minimum: 0
        username:
          description: The username of the user posted the photo
          type: string
          example: Alice
          pattern: "ˆ.*?$"
          minLength: 3
          maxLength: 20
        photoId:
          description: The photo user identifier
          type: integer
          example: 32
          minimum: 0
        commentText:
          description: The text of the comment
          type: string
          example: "Cool photo!"
          pattern: "ˆ.*?$"
          minLength: 1
          maxLength: 9999
    photo:
      title: Photo
      description: This object represents a single photo
      type: object
      properties:
        id:
          description: The unique photo identifier
          type: integer
          example: 2
          minimum: 0
        username:
          description: The username of the user posted the photo
          type: string
          example: Alice
          pattern: "ˆ.*?$"
          minLength: 3
          maxLength: 20
        userId:
          description: The unique user identifier
          type: integer
          example: 6
          minimum: 0
        DateTime:
          description: Date when the user posted the photo
          type: string
          format: date-time
          example: "2022-30-05T10:30:00Z"
          minLength: 1
          maxLength: 9999
        likes:
          description: Number of likes of the current photo
          type: integer
          example: 32
          minimum: 0
        comments:
          description: Number of comments of the current photo
          type: integer
          example: 5
          minimum: 0
        path:
          description: The url of the photo
          type: string
          example: "dog.jpeg"
          pattern: "ˆ.*?$"
          minLength: 1
          maxLength: 9999
    like:
      title: Like
      description: The likes of each photo
      type: object
      properties:
        id:
          description: The unique like identifier
          type: integer
          example: 2
          minimum: 0
        userId:
          description: The unique user identifier
          type: integer
          example: 3
          minimum: 0
        photoId:
          description: The photo user identifier
          type: integer
          example: 1
          minimum: 0
    ban:
      title: Ban
      description: Banned user
      type: object
      properties:
        bannedUser: 
          description: The username of the banned User
          type: string
          example: Alice
          pattern: "ˆ.*?$"
          minLength: 3
          maxLength: 20
    followedUsers:
      title: FollowedUsers
      description: Followed user
      type: object
      properties:
        Followed: 
          description: The usernames of the followed users
          type: array
          items:
            type: string
            example: Alice
            pattern: "ˆ.*?$"
            minLength: 3
            maxLength: 20
          minItems: 0
          maxItems: 1000       
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

paths:
  /users/{userId}/:
    parameters:
      - $ref: "#/components/parameters/userId"
    put:
      tags: ["User"]
      operationId: setMyUserName
      summary: Update username
      description: The username of the user is updated with the specified one
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  example: AliceNew
                  type: string
                  pattern: "ˆ.*?$"
                  minLength: 3
                  maxLength: 20
              required:
                - username
      responses:
        "200":
          description: The user's username was updated
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/userLogin" 
        "400": { $ref: "#/components/responses/BadRequest" }
        "404":
          description: User not found
        "500": { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorized" }
      security:
        - bearerAuth: []
  /profile/{username}/:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/username"
    get:
      tags: ["User"]
      operationId: getUserProfile
      summary: Get a specific user by ID
      description: Returns the user
      responses:
        "200":
          description: The user is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorized" }
      security:
        - bearerAuth: []
  /users/{userId}/followings/:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["User"]
      summary: All the users that the current user is following
      description: Returns all users that the authenticated user is following.
      operationId: getFollowings
      responses:
        "200":
          description: The followed users were returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followedUsers"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorized" }
      security:
        - bearerAuth: []

  /users/{userId}/followings/{followedUserId}/:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/followedUserId"
    delete:
      tags: ["User"]
      operationId: unfollowUser
      summary: Unfollow a user
      description: The current user stops following another user."
      responses:
        "204": { description: The user was unfollowed. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorized" }
      security:
        - bearerAuth: []
    put:
      tags: ["User"]
      operationId: followUser
      summary: Follow a specific user
      description: The current user becomes a follower of another user.
      responses:
        "204": { description: The user started following the other user. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorized" }
      security:
        - bearerAuth: []
  /users/{userId}/stream/:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Photo"]
      operationId: getMyStream
      summary: Get a list of all the photos of a user's followings
      description: Returns a list of all the photos of a user's followings in reverse chronological order
      responses:
        "200":
          description: The photos are returned
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/photo" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorized" }
      security:
        - bearerAuth: []
  /users/{userId}/photos/:
    parameters:
      - $ref: "#/components/parameters/userId"
    post:
      tags: ["Photo"]
      operationId: uploadPhoto
      summary: Upload a photo
      description: Uploads a new photo in the user's account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
              required:
                - path
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photo" 
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
  /users/{userId}/banned/:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["User"]
      summary: All the users that the current user banned
      description: Returns all users that the authenticated user have banned.
      operationId: GetAllBannedUsers
      responses:
        "200":
          description: The banned users were returned.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ban" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorized" }
      security:
        - bearerAuth: []
    
  /users/{userId}/banned/{bannedUserId}/:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/bannedUserId"
    delete:
      tags: ["User"]
      operationId: unbanUser
      summary: Unban a user
      description: The current user unbans another user."
      responses:
        "204": { description: The user was unbanned. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
    put:
      tags: ["User"]
      operationId: banUser
      summary: Ban a specific user
      description: The current user bans another user.
      responses:
        "204":
          description: The user was banned.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
      
  /photos/{photoId}/likes/{userId}/:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Photo"]
      summary: Get all the likes of the photo
      description: Returns the id of the user, the id of the like and the id of the current photo.
      operationId: GetAllLikesPhoto
      responses:
        "200":
          description: "The likes were returned."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/like"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
    put:
      tags: ["Photo"]
      summary: A user likes a photo
      description: A specific user likes a photo, creating a new like
      operationId: likePhoto
      responses:
        "204":
          description: The photo was liked.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
    delete:
      tags: ["Photo"]
      summary: A user unlikes a photo
      description: The specified user unlikes a photo that they previously liked.'
      operationId: unlikePhoto
      responses:
        "204":
          description: The photo was unliked.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []

  /photos/{photoId}/:
    parameters:
      - $ref: "#/components/parameters/photoId"
    delete:
      tags: ["Photo"]
      operationId: deletePhoto
      summary: Remove a Photo
      description: Remove a photo from the system.
      responses:
        "204": { description: Photo deleted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: Photo not found }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
  /photos/{photoId}/comments/:
    parameters:
      - $ref: "#/components/parameters/photoId"
    get:
      tags: ["Photo"]
      operationId: getComments
      summary: Get all the comments on a Photo
      description: Returns all the comments on a specified photo
      responses:
        "200":
          description: "All the comments of a photo are returned."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []

    post:
      tags: ["Photo"]
      operationId: commentPhoto
      summary: Add a comment to a photo
      description: Adds a new comment to a specific photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentText:
                  description: The content of the comment
                  example: Such a cool photo! :)
                  type: string
                  pattern: "ˆ.*?$"
                  minLength: 1
                  maxLength: 9999
              required:
                - commentText
      responses:
        "201":
          description: "The comment was added."
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/comment"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
  /photos/{photoId}/comments/{commentId}/:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/commentId"
    delete:
      tags: ["Photo"]
      operationId: uncommentPhoto
      summary: Delete a comment of a video
      description: Deletes a comment of a video if and only if the user is the autor of the comment
      responses:
        "204": { description: Comment deleted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { description: comment not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
  /session/:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Alice
                  pattern: "ˆ.*?$"
                  minLength: 3
                  maxLength: 20
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
