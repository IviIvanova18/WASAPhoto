openapi: 3.0.0
info:
  description: WASAPhoto app backend REST APIs
  title: WASAPhoto
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: "User"
    description: User operations
  - name: "Photo"
    description: Photo operations
  - name: "login"
    description: Operations for login
components:
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg.missing fields, etc).
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
  parameters:
    PhotoID:
      schema:
        type: integer
        example: 001
        readOnly: true
      name: photo_id
      in: path
      required: true
      description: Photo id
    Username:
      schema:
        type: string
        example: "user123"
        pattern: "ˆ.*?$"
        readOnly: true
        minLength: 5
        maxLength: 15
      name: username
      in: query
      required: true
      description: Username to find the user.
    UserID:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: user_id
      in: path
      required: true
      description: User ID
    Sort:
      schema:
        type: string
        pattern: "ˆ.*?$"
        enum: ["alphabetical", "date", "followers", "asc", "desc"]
        example: alphabetical
        minLength: 3
        maxLength: 15
      name: sort
      description: The way to sort the results
      in: query
      required: false
  schemas:
    Date:
      description: The date when the photo was uploaded
      type: string
      format: date
      example: 2022-01-01
      minLength: 8
      maxLength: 12
    Time:
      description: The time when the photo was uploaded
      type: string
      format: time
      example: 12:30:21:20
      minLength: 8
      maxLength: 12
    Likes:
      description: The number of likes each photo has
      type: integer
      example: 32
      minimum: 0
    Comments:
      description: All the comments from users the photo has
      type: string
      pattern: "ˆ.*?$"
      minLength: 10
      maxLength: 200
    Photo:
      title: Photo
      description: This object represents a single photo
      type: object
      properties:
        photo_id:
          description: Unique photo indentifier
          type: integer
          example: 1
          readOnly: true
        date: { $ref: "#/components/schemas/Date" }
        time: { $ref: "#/components/schemas/Time" }
        likes: { $ref: "#/components/schemas/Likes" }
        comments: { $ref: "#/components/schemas/Comments" }
    User:
      title: User
      description: This object represents a user
      type: object
      properties:
        user_id:
          description: Unique user identifier
          type: integer
          example: 1
          readOnly: true
        username:
          description: The username of the user
        photoCount:
          description: The total number of uploaded photos by this user
          type: integer
          example: 87
          minimum: 0
        followers:
          description: Information about the user's followers.
          type: object
          properties:
            total:
              description: The total number of users that follow the current user
              example: 24
              type: integer
        followings:
          description: Information about the users that the current user is following.
          type: object
          properties:
            total:
              description: The total number of users that are followed by current user
              example: 52
              type: integer
  securitySchemes:
    LegacyAuth:
      type: apiKey
      in: header
      name: X-App-Token
      description: |-
        App session token value. This value is sent by the server in the login
        and session refresh APIs.

paths:
  /users/:
    parameters:
      - $ref: "#/components/parameters/Sort"
      - $ref: "#/components/parameters/Username"
    get:
      tags: ["User"]
      operationId: serachUser
      summary: Search for a specific user by username or list all users
      description: Returns the list of users
      responses:
        200:
          description: User/s found
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/User" }
                minItems: 0
                maxItems: 1000
        400: { $ref: "#/components/responses/BadRequest" }
        500: { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []

  /users/{user_id}:
    parameters:
      - $ref: "#/components/parameters/UserID"
    get:
      tags: ["User"]
      operationId: getUserProfile
      summary: Get a specific user by ID
      description: Returns the user
      responses:
        200:
          description: The user is returned
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
      security:
        - LegacyAuth: []

    patch:
      tags: ["User"]
      operationId: setMyUserName
      summary: Update username
      description: The username of the user is updated with the specified one
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The user's display username
                  type: string
                  example: "user123"
                  minLength: 5
                  maxLength: 15
      responses:
        200:
          description: The user's username was updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
      security:
        - LegacyAuth: []
  /users/{user_id}/following:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/Sort"
    get:
      tags: ["User"]
      summary: All the users that the current user is following
      description: Returns all users that the authenticated user is following.
      operationId: getUserFollowing
      responses:
        200:
          description: The followed users were returned.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/User" }
                minItems: 0
                maxItems: 1000
      security:
        - LegacyAuth: []

  /users/{user_id}/following/{follower_user_id}:
    parameters:
      - $ref: "#/components/parameters/UserID"
    delete:
      tags: ["User"]
      operationId: unfollowUser
      summary: Unfollow a user
      description: The current user stops following another user."
      parameters:
        - name: follower_user_id
          description: The id of the user to unfollow.
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        204: { description: "The user was unfollowed." }
      security:
        - LegacyAuth: []
    put:
      tags: ["User"]
      operationId: followUser
      summary: Follow a specific user
      description: The current user becomes the follower of another user.
      parameters:
        - name: follower_user_id
          description: The id of the user to follow.
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        204:
          description: The user was followed.
      security:
        - LegacyAuth: []
  /users/{user_id}/photos:
    parameters:
      - $ref: "#/components/parameters/UserID"
    get:
      tags: ["Photo"]
      operationId: getMyStream
      summary: Get a list of all the photos
      description: Returns a list of all the photos of a user in reverse chronological order
      responses:
        200:
          description: The photos are returned
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Photo" }
                minItems: 0
                maxItems: 1000
      security:
        - LegacyAuth: []

    post:
      tags: ["Photo"]
      operationId: uploadPhoto
      summary: Upload a photo
      description: Uploads a new photo in the user's account
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Photo" }
      responses:
        201:
          description: Photo uploaded successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        400: { $ref: "#/components/responses/BadRequest" }
        500: { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []
  /users/{user_id}/banned/{banned_user_id}:
    parameters:
      - $ref: "#/components/parameters/UserID"
    delete:
      tags: ["User"]
      operationId: unbanUser
      summary: Unban a user
      description: The current user unbans another user."
      parameters:
        - name: banned_user_id
          description: The id of the user to unban.
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        204: { description: The user was unbanned. }
      security:
        - LegacyAuth: []
    put:
      tags: ["User"]
      operationId: banUser
      summary: Ban a specific user
      description: The current user bans another user.
      parameters:
        - name: banned_user_id
          description: The id of the user to ban.
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        204:
          description: The user was banned.
        400: { $ref: "#/components/responses/BadRequest" }
        500: { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []
  /photos/{photo_id}/likes/{user_id}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/Sort"
    get:
      tags: ["Photo"]
      summary: Get all the users who have liked a photo
      description: Returns all the users who have liked a particular photo.'
      operationId: getPhotoLikes
      responses:
        200:
          description: "The users were returned."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                  minItems: 0
                  maxItems: 1000
      security:
        - LegacyAuth: []

    put:
      tags: ["Photo"]
      summary: A user likes a photo
      description: A specific users like a photo
      operationId: likePhoto
      responses:
        204:
          description: The photo was liked.
        400: { $ref: "#/components/responses/BadRequest" }
        500: { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []
    delete:
      tags: ["Photo"]
      summary: A user unlikes a photo
      description: The specified user unlikes a photo that they previously liked.'
      operationId: unlikePhoto
      responses:
        204:
          description: The photo was unliked.
        400: { $ref: "#/components/responses/BadRequest" }
        500: { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []
  /photos/:
    get:
      tags: ["Photo"]
      operationId: listPhotos
      summary: Get the list of all photos (the stream)
      description: Returns the list of all photos in reverse chronological order uploaded in the app
      parameters:
        - name: date
          in: query
          required: true
          description: The date the photo was uploaded.
          schema: { $ref: "#/components/schemas/Date" }
        - name: time
          in: query
          required: true
          description: The time the photo was uploaded.
          schema: { $ref: "#/components/schemas/Time" }
        - name: likes
          in: query
          required: true
          description: The number of likes the photo has.
          schema: { $ref: "#/components/schemas/Likes" }
        - name: comments
          in: query
          required: true
          description: The comments the photo has.
          schema: { $ref: "#/components/schemas/Comments" }
      responses:
        "200":
          description: List the stream
          content:
            image/png:
              schema:
                type: string
                format: binary

        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []

  /photos/{photo_id}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
    delete:
      tags: ["Photo"]
      operationId: deletePhoto
      summary: Remove a Photo
      description: Remove a photo from the system.
      responses:
        "204": { description: Photo deleted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: Photo not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []
  /photos/{photo_id}/comments:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/Sort"
    get:
      tags: ["Photo"]
      operationId: get_commets
      summary: Get all the comments on a Photo
      description: Returns all the comments on a specified photo
      responses:
        200:
          description: "All the comments of a photo are returned."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Comments" }
                minItems: 0
                maxItems: 1000
      security:
        - LegacyAuth: []

    post:
      tags: ["Photo"]
      operationId: commentPhoto
      summary: Add a comment to a photo
      description: Adds a new comment to a specific photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  description: The content of the comment
                  example: Such a cool photo! :)
                  type: string
                  pattern: "ˆ.*?$"
                  minLength: 10
                  maxLength: 200
      responses:
        201:
          description: "The comment was added."
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comments" }
        400: { $ref: "#/components/responses/BadRequest" }
        500: { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []
  /photos/{photo_id}/comments/{comment_id}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
    delete:
      tags: ["Photo"]
      operationId: uncommentPhoto
      summary: Delete a comment of a video
      description: Deletes a comment of a video if and only if the user is the autor of the comment
      parameters:
        - name: comment_id
          description: The id of the comment
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "204": { description: Comment deleted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: comment not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - LegacyAuth: []
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "ˆ.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
